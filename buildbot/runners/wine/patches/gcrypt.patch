From fa0f1ad2122c4af16f7ca357ce29ea990451feaa Mon Sep 17 00:00:00 2001
From: Mathieu Comandon <strycore@gmail.com>
Date: Tue, 20 Dec 2016 15:49:02 -0800
Subject: [PATCH] Add gcrypt patch

---
 configure.ac              |  14 ++
 dlls/bcrypt/bcrypt_main.c | 602 +++++++++++++++++++++++++++++++++++++++++++++-
 include/bcrypt.h          |  13 +-
 3 files changed, 610 insertions(+), 19 deletions(-)

diff --git a/configure.ac b/configure.ac
index 353f271..996241d 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1275,6 +1275,20 @@ fi
 WINE_WARNING_WITH(gnutls,[test "x$ac_cv_lib_soname_gnutls" = "x"],
                  [libgnutls ${notice_platform}development files not found, no schannel support.])
 
+
+dnl **** Check for libgcrypt ****
+if test "x$with_gcrypt" != "xno"
+then
+    WINE_PACKAGE_FLAGS(GCRYPT,[gcrypt],,,,
+        [AC_CHECK_HEADER(gcrypt.h,
+            [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <gcrypt.h>]], [[static typeof(gcry_check_version) *func; if (func) return 0;]])],
+                [WINE_CHECK_SONAME(gcrypt,gcry_check_version,,[GCRYPT_CFLAGS=""],[$GCRYPT_LIBS],[[libgcrypt\\(-deb0\\)\\{0,1\\}]])
+                ])],
+            [GCRYPT_CFLAGS=""])])
+fi
+WINE_WARNING_WITH(gcrypt,[test "x$ac_cv_lib_soname_gcrypt" = "x"],
+                 [libgcrypt ${notice_platform}development files not found, no full bcrypt support.])
+
 dnl **** Check which curses lib to use ***
 CURSES_LIBS=""
 if test "$ac_cv_header_ncurses_h" = "yes"
diff --git a/dlls/bcrypt/bcrypt_main.c b/dlls/bcrypt/bcrypt_main.c
index 6023c94..7b2f9c0 100644
--- a/dlls/bcrypt/bcrypt_main.c
+++ b/dlls/bcrypt/bcrypt_main.c
@@ -24,6 +24,8 @@
 #ifdef HAVE_COMMONCRYPTO_COMMONDIGEST_H
 #include <CommonCrypto/CommonDigest.h>
 #include <CommonCrypto/CommonHMAC.h>
+#elif defined(SONAME_LIBGCRYPT)
+#include <gcrypt.h>
 #elif defined(SONAME_LIBGNUTLS)
 #include <gnutls/gnutls.h>
 #include <gnutls/crypto.h>
@@ -44,7 +46,109 @@ WINE_DEFAULT_DEBUG_CHANNEL(bcrypt);
 
 static HINSTANCE instance;
 
-#if defined(HAVE_GNUTLS_HASH) && !defined(HAVE_COMMONCRYPTO_COMMONDIGEST_H)
+#if defined(SONAME_LIBGCRYPT) && !defined(HAVE_COMMONCRYPTO_COMMONDIGEST_H)
+WINE_DECLARE_DEBUG_CHANNEL(winediag);
+
+static void *libgcrypt_handle;
+#define MAKE_FUNCPTR(f) static typeof(f) * p##f
+MAKE_FUNCPTR(gcry_check_version);
+MAKE_FUNCPTR(gcry_set_log_handler);
+MAKE_FUNCPTR(gcry_control);
+
+MAKE_FUNCPTR(gcry_md_open);
+MAKE_FUNCPTR(gcry_md_close);
+MAKE_FUNCPTR(gcry_md_copy);
+MAKE_FUNCPTR(gcry_md_setkey);
+MAKE_FUNCPTR(gcry_md_write);
+MAKE_FUNCPTR(gcry_md_read);
+
+MAKE_FUNCPTR(gcry_md_ctl);
+MAKE_FUNCPTR(gcry_md_debug);
+
+MAKE_FUNCPTR(gcry_cipher_open);
+MAKE_FUNCPTR(gcry_cipher_close);
+MAKE_FUNCPTR(gcry_cipher_encrypt);
+MAKE_FUNCPTR(gcry_cipher_decrypt);
+MAKE_FUNCPTR(gcry_cipher_setiv);
+MAKE_FUNCPTR(gcry_cipher_setkey);
+
+MAKE_FUNCPTR(gcry_strerror);
+MAKE_FUNCPTR(gcry_strsource);
+#undef MAKE_FUNCPTR
+
+static void gcrypt_log( void* opaque, int level, const char *msg, va_list arg_ptr)
+{
+    //todo: format message
+    TRACE( "<%d> %s", level, msg );
+}
+
+static BOOL gcrypt_initialize(void)
+{
+    if (!(libgcrypt_handle = wine_dlopen( SONAME_LIBGCRYPT, RTLD_NOW, NULL, 0 )))
+    {
+        ERR_(winediag)( "failed to load libgcrypt, no support for crypto hashes\n" );
+        return FALSE;
+    }
+
+#define LOAD_FUNCPTR(f) \
+    if (!(p##f = wine_dlsym( libgcrypt_handle, #f, NULL, 0 ))) \
+    { \
+        ERR( "failed to load %s\n", #f ); \
+        goto fail; \
+    }
+
+    LOAD_FUNCPTR(gcry_check_version)
+    LOAD_FUNCPTR(gcry_set_log_handler)
+    LOAD_FUNCPTR(gcry_control)
+
+    LOAD_FUNCPTR(gcry_md_open);
+    LOAD_FUNCPTR(gcry_md_close);
+    LOAD_FUNCPTR(gcry_md_copy);
+    LOAD_FUNCPTR(gcry_md_setkey);
+    LOAD_FUNCPTR(gcry_md_write);
+    LOAD_FUNCPTR(gcry_md_read);
+
+
+    LOAD_FUNCPTR(gcry_md_ctl);
+    LOAD_FUNCPTR(gcry_md_debug);
+
+    LOAD_FUNCPTR(gcry_cipher_open);
+    LOAD_FUNCPTR(gcry_cipher_close);
+    LOAD_FUNCPTR(gcry_cipher_encrypt);
+    LOAD_FUNCPTR(gcry_cipher_decrypt);
+    LOAD_FUNCPTR(gcry_cipher_setiv);
+    LOAD_FUNCPTR(gcry_cipher_setkey);
+
+    LOAD_FUNCPTR(gcry_strerror);
+    LOAD_FUNCPTR(gcry_strsource);
+#undef LOAD_FUNCPTR
+
+    if (!pgcry_check_version (GCRYPT_VERSION))
+    {
+        ERR( "gcrypt version mismatch\n");
+        goto fail;
+    }
+    pgcry_control(GCRYCTL_DISABLE_SECMEM);
+    if (TRACE_ON( bcrypt ))
+    {
+        pgcry_control(GCRYCTL_SET_VERBOSITY, 4 );
+        pgcry_set_log_handler( gcrypt_log, NULL );
+    }
+
+    return TRUE;
+
+fail:
+    wine_dlclose( libgcrypt_handle, NULL, 0 );
+    libgcrypt_handle = NULL;
+    return FALSE;
+}
+
+static void gcrypt_uninitialize(void)
+{
+    wine_dlclose( libgcrypt_handle, NULL, 0 );
+    libgcrypt_handle = NULL;
+}
+#elif defined(HAVE_GNUTLS_HASH) && !defined(HAVE_COMMONCRYPTO_COMMONDIGEST_H)
 WINE_DECLARE_DEBUG_CHANNEL(winediag);
 
 static void *libgnutls_handle;
@@ -123,6 +227,7 @@ static void gnutls_uninitialize(void)
     wine_dlclose( libgnutls_handle, NULL, 0 );
     libgnutls_handle = NULL;
 }
+
 #endif /* HAVE_GNUTLS_HASH && !HAVE_COMMONCRYPTO_COMMONDIGEST_H */
 
 NTSTATUS WINAPI BCryptEnumAlgorithms(ULONG dwAlgOperations, ULONG *pAlgCount,
@@ -138,6 +243,7 @@ NTSTATUS WINAPI BCryptEnumAlgorithms(ULONG dwAlgOperations, ULONG *pAlgCount,
 
 #define MAGIC_ALG  (('A' << 24) | ('L' << 16) | ('G' << 8) | '0')
 #define MAGIC_HASH (('H' << 24) | ('A' << 16) | ('S' << 8) | 'H')
+#define MAGIC_KEY  (('K' << 24) | ('E' << 16) | ('Y' << 8) | '0')
 struct object
 {
     ULONG magic;
@@ -150,7 +256,8 @@ enum alg_id
     ALG_ID_SHA1,
     ALG_ID_SHA256,
     ALG_ID_SHA384,
-    ALG_ID_SHA512
+    ALG_ID_SHA512,
+    ALG_ID_AES
 };
 
 static const struct {
@@ -235,6 +342,7 @@ NTSTATUS WINAPI BCryptOpenAlgorithmProvider( BCRYPT_ALG_HANDLE *handle, LPCWSTR
     else if (!strcmpW( id, BCRYPT_SHA256_ALGORITHM )) alg_id = ALG_ID_SHA256;
     else if (!strcmpW( id, BCRYPT_SHA384_ALGORITHM )) alg_id = ALG_ID_SHA384;
     else if (!strcmpW( id, BCRYPT_SHA512_ALGORITHM )) alg_id = ALG_ID_SHA512;
+    else if (!strcmpW( id, BCRYPT_AES_ALGORITHM )) alg_id = ALG_ID_AES;
     else
     {
         FIXME( "algorithm %s not supported\n", debugstr_w(id) );
@@ -433,6 +541,300 @@ static NTSTATUS hmac_finish( struct hash *hash, UCHAR *output, ULONG size )
 
     return STATUS_SUCCESS;
 }
+#elif defined(SONAME_LIBGCRYPT)
+struct hash
+{
+    struct object hdr;
+    BOOL hmac;
+    enum alg_id   alg_id;
+    gcry_md_hd_t  hash_handle;
+};
+
+struct key
+{
+    struct object    hdr;
+    enum alg_id      alg_id;
+
+    gcry_cipher_hd_t cypher_handle;
+};
+
+static NTSTATUS hash_init( struct hash *hash )
+{
+    TRACE("%p\n", hash);
+    switch (hash->alg_id)
+    {
+    case ALG_ID_MD5:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_MD5, 0);
+        break;
+
+    case ALG_ID_SHA1:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_SHA1, 0);
+        break;
+
+    case ALG_ID_SHA256:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_SHA256, 0);
+        break;
+
+    case ALG_ID_SHA384:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_SHA384, 0);
+        break;
+
+    case ALG_ID_SHA512:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_SHA512, 0);
+        break;
+
+    default:
+        ERR( "unhandled id %u\n", hash->alg_id );
+        break;
+    }
+
+//    pgcry_md_debug (hash->hash_handle, "dump");
+
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS hmac_init( struct hash *hash, UCHAR *key, ULONG key_size )
+{
+    TRACE("%d\n", key_size);
+    switch (hash->alg_id)
+    {
+    case ALG_ID_MD5:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_MD5, GCRY_MD_FLAG_HMAC);
+        break;
+
+    case ALG_ID_SHA1:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_SHA1, GCRY_MD_FLAG_HMAC);
+        break;
+
+    case ALG_ID_SHA256:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_SHA256, GCRY_MD_FLAG_HMAC);
+        break;
+
+    case ALG_ID_SHA384:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_SHA384, GCRY_MD_FLAG_HMAC);
+        break;
+
+    case ALG_ID_SHA512:
+        pgcry_md_open(&hash->hash_handle, GCRY_MD_SHA512, GCRY_MD_FLAG_HMAC);
+        break;
+
+    default:
+        ERR( "unhandled id %u\n", hash->alg_id );
+        break;
+    }
+//    pgcry_md_debug (hash->hash_handle, "dumphmac");
+    pgcry_md_setkey(hash->hash_handle, key, key_size);
+    return STATUS_SUCCESS;
+}
+
+
+static NTSTATUS hash_update( struct hash *hash, UCHAR *input, ULONG size )
+{
+    pgcry_md_write(hash->hash_handle, input, size);
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS hmac_update( struct hash *hash, UCHAR *input, ULONG size )
+{
+    pgcry_md_write(hash->hash_handle, input, size);
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS hash_finish( struct hash *hash, UCHAR *output, ULONG size )
+{
+    UCHAR* buf;
+    pgcry_md_ctl(hash->hash_handle, GCRYCTL_FINALIZE, NULL, 0);
+    buf = pgcry_md_read(hash->hash_handle, 0);
+    memcpy(output, buf, size);
+    pgcry_md_close(hash->hash_handle);
+    hash->hash_handle = NULL;
+
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS hmac_finish( struct hash *hash, UCHAR *output, ULONG size )
+{
+    UCHAR* buf;
+    pgcry_md_ctl(hash->hash_handle, GCRYCTL_FINALIZE, NULL, 0);
+    buf= pgcry_md_read(hash->hash_handle, 0);
+    memcpy(output, buf, size);
+    pgcry_md_close(hash->hash_handle);
+    hash->hash_handle = NULL;
+
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS hash_duplicate( struct hash *hash,  struct hash **hashout )
+{
+    struct hash *hashout2;
+
+    if (!(hashout2 = HeapAlloc( GetProcessHeap(), 0, sizeof(*hashout2) )))
+    {
+     FIXME("no mem\n");
+     return STATUS_NO_MEMORY;
+    }
+
+    hashout2->hdr.magic = hash->hdr.magic;
+    hashout2->alg_id    = hash->alg_id;
+    hashout2->hmac      = hash->hmac;
+
+    pgcry_md_copy(&hashout2->hash_handle, hash->hash_handle);
+    *hashout = hashout2;
+
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS key_init( struct key *key, UCHAR *secret, ULONG size )
+{
+    int alg = 0;
+
+    switch (key->alg_id)
+    {
+    case ALG_ID_AES:
+        switch (size)
+        {
+        case 128 / 8:
+            FIXME( "128 bit key provided\n" );
+            alg = GCRY_CIPHER_AES;
+            break;
+        case 192 / 8:
+            FIXME( "192 bit key provided\n" );
+            alg = GCRY_CIPHER_AES192;
+            break;
+        case 256 / 8:
+            FIXME( "256 bit key provided\n" );
+            alg = GCRY_CIPHER_AES256;
+            break;
+        default:
+            ERR( "unhandled key size %u\n", size );
+            return STATUS_NOT_IMPLEMENTED;
+        }
+
+        break;
+
+    default:
+        ERR( "unhandled id %u\n", key->alg_id );
+        return STATUS_NOT_IMPLEMENTED;
+    }
+
+    if (pgcry_cipher_open( &key->cypher_handle, alg, GCRY_CIPHER_MODE_CBC, 0)) {
+        ERR("gcrypt failed to init cipher");
+        return STATUS_INTERNAL_ERROR;
+    }
+
+    pgcry_cipher_setkey(key->cypher_handle, secret, size);
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS key_finish( struct key *key )
+{
+    pgcry_cipher_close ( key->cypher_handle );
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS key_encrypt( struct key *key, UCHAR *input, ULONG input_size, UCHAR *iv, ULONG iv_size, UCHAR *output, ULONG output_size, ULONG flags )
+{
+    gcry_error_t err;
+    UCHAR* padded_input;
+    ULONG block_size = 16;
+    ULONG blocks = input_size / block_size + 1;
+
+    ULONG delta = block_size*blocks - input_size;
+
+    if (iv) {
+        pgcry_cipher_setiv(key->cypher_handle, iv, iv_size);
+    }
+
+    if (flags)// && input_size % 16)
+    {
+        //pad input to block size
+
+        padded_input = HeapAlloc( GetProcessHeap(), 0, block_size*blocks);
+
+        //Windows BCryptEncode seems to write standart PKCS #7 padding
+        memset(padded_input,delta,block_size*blocks);
+        memcpy(padded_input,input,input_size);
+
+        if (( err = pgcry_cipher_encrypt(key->cypher_handle, output, output_size, padded_input, block_size*blocks))>0)
+        {
+            FIXME("Failed %d  %s/%s\n", err, pgcry_strsource (err),
+                   pgcry_strerror (err));
+          return STATUS_INTERNAL_ERROR;
+        }
+        HeapFree( GetProcessHeap(), 0, padded_input );
+    }
+    else
+    {
+
+        if (( err = pgcry_cipher_encrypt(key->cypher_handle, output, output_size, input, input_size))>0)
+        {
+            FIXME("Failed %d  %s/%s\n", err, pgcry_strsource (err),
+                   pgcry_strerror (err));
+          return STATUS_INTERNAL_ERROR;
+        }
+    }
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS key_decrypt( struct key *key, UCHAR *input, ULONG input_size, UCHAR *iv, ULONG iv_size, UCHAR *output, ULONG output_size, ULONG flags, ULONG* result )
+{
+    gcry_error_t err;
+    UCHAR* padded_input;
+    UCHAR* padded_output;
+    ULONG block_size = 16;
+    ULONG blocks = input_size / block_size;// + 1;
+    if (iv) {
+        pgcry_cipher_setiv(key->cypher_handle, iv, iv_size);
+    }
+
+    if (flags)// && input_size % 16)
+    {
+
+        //pad input to block size
+        padded_input = HeapAlloc( GetProcessHeap(), 0, block_size*blocks);
+        memset(padded_input,0,block_size*blocks);
+        memcpy(padded_input,input,input_size);
+
+        // create big enought output
+        padded_output = HeapAlloc( GetProcessHeap(), 0, block_size*blocks);
+        memset(padded_output,0,block_size*blocks);
+
+        if (( err = pgcry_cipher_decrypt(key->cypher_handle, padded_output, block_size*blocks, padded_input, block_size*blocks))>0)
+        {
+            FIXME("Failed %d  %s/%s\n", err, pgcry_strsource (err),
+                   pgcry_strerror (err));
+          return STATUS_INTERNAL_ERROR;
+        }
+
+        //truncate
+        output_size = block_size*blocks;
+
+
+        if (padded_output[output_size-1]!=0)
+        {
+            output_size-=padded_output[output_size-1];
+        }
+
+        *result = output_size;
+
+        memcpy(output, padded_output, output_size);
+
+        HeapFree( GetProcessHeap(), 0, padded_input );
+        HeapFree( GetProcessHeap(), 0, padded_output );
+    }
+    else
+    {
+        if ((err = pgcry_cipher_decrypt(key->cypher_handle, output, output_size, input, input_size))>0)
+        {
+            FIXME("Failed %d  %s/%s\n", err, pgcry_strsource (err),
+                       pgcry_strerror (err));
+            return STATUS_INTERNAL_ERROR;
+        }
+    }
+    return STATUS_SUCCESS;
+}
+
+
 #elif defined(HAVE_GNUTLS_HASH)
 struct hash
 {
@@ -592,6 +994,11 @@ static NTSTATUS hmac_finish( struct hash *hash, UCHAR *output, ULONG size )
 #define OBJECT_LENGTH_SHA384    382
 #define OBJECT_LENGTH_SHA512    382
 
+#define OBJECT_LENGTH_AES       4
+
+// 128 bit key size default
+#define BLOCK_LENGTH_AES        16
+
 static NTSTATUS generic_alg_property( enum alg_id id, const WCHAR *prop, UCHAR *buf, ULONG size, ULONG *ret_size )
 {
     if (!strcmpW( prop, BCRYPT_HASH_LENGTH ))
@@ -678,6 +1085,20 @@ static NTSTATUS get_alg_property( enum alg_id id, const WCHAR *prop, UCHAR *buf,
         FIXME( "unsupported sha512 algorithm property %s\n", debugstr_w(prop) );
         return STATUS_NOT_IMPLEMENTED;
 
+    case ALG_ID_AES:
+        if (!strcmpW( prop, BCRYPT_BLOCK_LENGTH ))
+        {
+            value = BLOCK_LENGTH_AES;
+            break;
+        }
+        if (!strcmpW( prop, BCRYPT_OBJECT_LENGTH ))
+        {
+            value = OBJECT_LENGTH_AES;
+            break;
+        }
+        FIXME( "unsupported aes algorithm property %s\n", debugstr_w(prop) );
+        return STATUS_NOT_IMPLEMENTED;
+
     default:
         FIXME( "unsupported algorithm %u\n", id );
         return STATUS_NOT_IMPLEMENTED;
@@ -686,6 +1107,7 @@ static NTSTATUS get_alg_property( enum alg_id id, const WCHAR *prop, UCHAR *buf,
     if (size < sizeof(ULONG))
     {
         *ret_size = sizeof(ULONG);
+        FIXME( "buffer too small\n");
         return STATUS_BUFFER_TOO_SMALL;
     }
     if (buf) *(ULONG *)buf = value;
@@ -740,16 +1162,26 @@ NTSTATUS WINAPI BCryptCreateHash( BCRYPT_ALG_HANDLE algorithm, BCRYPT_HASH_HANDL
 
     TRACE( "%p, %p, %p, %u, %p, %u, %08x - stub\n", algorithm, handle, object, objectlen,
            secret, secretlen, flags );
+
     if (flags)
     {
         FIXME( "unimplemented flags %08x\n", flags );
         return STATUS_NOT_IMPLEMENTED;
     }
 
-    if (!alg || alg->hdr.magic != MAGIC_ALG) return STATUS_INVALID_HANDLE;
-    if (object) FIXME( "ignoring object buffer\n" );
+    if (!alg || alg->hdr.magic != MAGIC_ALG)
+    {
+     FIXME( "invalid handle!!\n" );
+     return STATUS_INVALID_HANDLE;
+    }
+    if (object) FIXME( "ignoring object buffer!!\n" );
+
+    if (!(hash = HeapAlloc( GetProcessHeap(), 0, sizeof(*hash) )))
+    {
+    FIXME( "no memory!!\n" );
+    return STATUS_NO_MEMORY;
+    }
 
-    if (!(hash = HeapAlloc( GetProcessHeap(), 0, sizeof(*hash) ))) return STATUS_NO_MEMORY;
     hash->hdr.magic = MAGIC_HASH;
     hash->alg_id    = alg->id;
     hash->hmac      = alg->hmac;
@@ -766,10 +1198,12 @@ NTSTATUS WINAPI BCryptCreateHash( BCRYPT_ALG_HANDLE algorithm, BCRYPT_HASH_HANDL
     if (status != STATUS_SUCCESS)
     {
         HeapFree( GetProcessHeap(), 0, hash );
+        FIXME( "WUT\n" );
         return status;
     }
 
     *handle = hash;
+    TRACE("%p\n", hash);
     return STATUS_SUCCESS;
 }
 
@@ -854,6 +1288,156 @@ NTSTATUS WINAPI BCryptHash( BCRYPT_ALG_HANDLE algorithm, UCHAR *secret, ULONG se
     return BCryptDestroyHash( handle );
 }
 
+NTSTATUS WINAPI BCryptDuplicateHash( BCRYPT_HASH_HANDLE handle, BCRYPT_HASH_HANDLE *hash_handle_out, UCHAR *object, ULONG object_size, ULONG flags)
+{
+    struct hash *hash = handle;
+    struct hash *duplicate;
+    NTSTATUS status;
+
+    TRACE( "%p %p %p %u %08x\n",
+        handle,
+        hash_handle_out,
+        object,
+        object_size,
+        flags
+    );
+
+    if (flags) {
+        FIXME( "unimplemented flags %08x\n", flags );
+    }
+
+    if (object) FIXME( "ignoring object buffer\n" );
+
+    if (!hash || hash->hdr.magic != MAGIC_HASH) return STATUS_INVALID_HANDLE;
+
+    status = hash_duplicate(hash, &duplicate);
+
+    if (status != STATUS_SUCCESS) {
+        return status;
+    }
+
+    *hash_handle_out = duplicate;
+
+    TRACE( "hash duplicate OK %p %p\n",  hash_handle_out, duplicate);
+    return STATUS_SUCCESS;
+}
+
+
+NTSTATUS WINAPI BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE algorithm, BCRYPT_KEY_HANDLE *key_handle_out, UCHAR *key_object, ULONG key_object_size, UCHAR *secret, ULONG secret_size, ULONG flags)
+{
+    struct key *key;
+    struct algorithm *alg = algorithm;
+    NTSTATUS status;
+
+    TRACE("%p %p %p %u %p %u %08x\n",
+        algorithm,
+        key_handle_out,
+        key_object,
+        key_object_size,
+        secret,
+        secret_size,
+        flags
+    );
+
+    if (key_object) FIXME( "ignoring object buffer\n" );
+
+    // if (!alg || alg->hdr.magic != MAGIC_ALG) return STATUS_INVALID_HANDLE;
+    if (!alg || alg->hdr.magic != MAGIC_ALG) {
+        FIXME("invalid alg handle");
+        return STATUS_INVALID_HANDLE;
+    }
+
+    if (!(key = HeapAlloc( GetProcessHeap(), 0, sizeof(*key) ))) return STATUS_NO_MEMORY;
+
+    key->hdr.magic = MAGIC_KEY;
+    key->alg_id = alg->id;
+
+    status = key_init(key, secret, secret_size);
+
+    if (status != STATUS_SUCCESS) {
+        ERR("key initiazation failed");
+        HeapFree( GetProcessHeap(), 0, key );
+        return status;
+    }
+
+    *key_handle_out = key;
+    return STATUS_SUCCESS;
+}
+
+NTSTATUS WINAPI BCryptDestroyKey(BCRYPT_KEY_HANDLE handle)
+{
+    struct key *key = handle;
+
+    TRACE( "%p\n", handle );
+
+    // if (!key || key->hdr.magic != MAGIC_KEY) return STATUS_INVALID_HANDLE;
+    if (!key || key->hdr.magic != MAGIC_KEY) {
+        ERR("invalid key handle");
+        return STATUS_INVALID_HANDLE;
+    }
+
+    key_finish(key);
+
+    HeapFree( GetProcessHeap(), 0, key );
+    return STATUS_SUCCESS;
+}
+
+NTSTATUS WINAPI BCryptEncrypt(BCRYPT_KEY_HANDLE handle, UCHAR *pbInput, ULONG cbInput, void *pPaddingInfo, UCHAR *pbIV, ULONG cbIV, UCHAR *pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG flags)
+{
+    struct key *key = handle;
+
+    TRACE( "%p %p %u %p %p %u %p %u %p %08x\n",
+        handle,
+        pbInput,
+        cbInput,
+        pPaddingInfo,
+        pbIV,
+        cbIV,
+        pbOutput,
+        cbOutput,
+        pcbResult,
+        flags
+    );
+
+    // if (!key || key->hdr.magic != MAGIC_KEY) return STATUS_INVALID_HANDLE;
+    if (!key || key->hdr.magic != MAGIC_KEY) {
+        ERR("invalid key handle");
+        return STATUS_INVALID_HANDLE;
+    }
+
+    *pcbResult = cbOutput;
+
+    return key_encrypt(key, pbInput, cbInput, pbIV, cbIV, pbOutput, cbOutput, flags );
+}
+
+NTSTATUS WINAPI BCryptDecrypt(BCRYPT_KEY_HANDLE handle, UCHAR *pbInput, ULONG cbInput, void *pPaddingInfo, UCHAR *pbIV, ULONG cbIV, UCHAR *pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG flags)
+{
+    struct key *key = handle;
+
+    TRACE( "%p %p %u %p %p %u %p %u %p %08x\n",
+        handle,
+        pbInput,
+        cbInput,
+        pPaddingInfo,
+        pbIV,
+        cbIV,
+        pbOutput,
+        cbOutput,
+        pcbResult,
+        flags
+    );
+
+    // if (!key || key->hdr.magic != MAGIC_KEY) return STATUS_INVALID_HANDLE;
+    if (!key || key->hdr.magic != MAGIC_KEY) {
+        ERR("invalid key handle");
+        return STATUS_INVALID_HANDLE;
+    }
+
+    *pcbResult = cbOutput;
+
+    return key_decrypt(key, pbInput, cbInput, pbIV, cbIV, pbOutput, cbOutput, flags, pcbResult );
+}
+
 BOOL WINAPI DllMain( HINSTANCE hinst, DWORD reason, LPVOID reserved )
 {
     switch (reason)
@@ -861,14 +1445,18 @@ BOOL WINAPI DllMain( HINSTANCE hinst, DWORD reason, LPVOID reserved )
     case DLL_PROCESS_ATTACH:
         instance = hinst;
         DisableThreadLibraryCalls( hinst );
-#if defined(HAVE_GNUTLS_HASH) && !defined(HAVE_COMMONCRYPTO_COMMONDIGEST_H)
+#if defined(SONAME_LIBGCRYPT) && !defined(HAVE_COMMONCRYPTO_COMMONDIGEST_H)
+        gcrypt_initialize();
+#elif defined(HAVE_GNUTLS_HASH) && !defined(HAVE_COMMONCRYPTO_COMMONDIGEST_H)
         gnutls_initialize();
 #endif
         break;
 
     case DLL_PROCESS_DETACH:
         if (reserved) break;
-#if defined(HAVE_GNUTLS_HASH) && !defined(HAVE_COMMONCRYPTO_COMMONDIGEST_H)
+#if defined(SONAME_LIBGCRYPT) && !defined(HAVE_COMMONCRYPTO_COMMONDIGEST_H)
+        gcrypt_uninitialize();
+#elif defined(HAVE_GNUTLS_HASH) && !defined(HAVE_COMMONCRYPTO_COMMONDIGEST_H)
         gnutls_uninitialize();
 #endif
         break;
diff --git a/include/bcrypt.h b/include/bcrypt.h
index 05d0691..ace3539 100644
--- a/include/bcrypt.h
+++ b/include/bcrypt.h
@@ -83,35 +83,24 @@ typedef struct _BCRYPT_ALGORITHM_IDENTIFIER
 } BCRYPT_ALGORITHM_IDENTIFIER;
 
 typedef PVOID BCRYPT_ALG_HANDLE;
-typedef PVOID BCRYPT_KEY_HANDLE;
 typedef PVOID BCRYPT_HANDLE;
+typedef PVOID BCRYPT_KEY_HANDLE;
 typedef PVOID BCRYPT_HASH_HANDLE;
 
-/* Flags for BCryptGenRandom */
 #define BCRYPT_RNG_USE_ENTROPY_IN_BUFFER 0x00000001
 #define BCRYPT_USE_SYSTEM_PREFERRED_RNG  0x00000002
-
-/* Flags for BCryptOpenAlgorithmProvider */
 #define BCRYPT_ALG_HANDLE_HMAC_FLAG 0x00000008
 
-/* Flags for BCryptEncrypt/BCryptDecrypt */
-#define BCRYPT_BLOCK_PADDING        0x00000001
-
 NTSTATUS WINAPI BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE, ULONG);
 NTSTATUS WINAPI BCryptCreateHash(BCRYPT_ALG_HANDLE, BCRYPT_HASH_HANDLE *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG);
-NTSTATUS WINAPI BCryptDecrypt(BCRYPT_KEY_HANDLE, PUCHAR, ULONG, VOID *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG *, ULONG);
 NTSTATUS WINAPI BCryptDestroyHash(BCRYPT_HASH_HANDLE);
-NTSTATUS WINAPI BCryptDestroyKey(BCRYPT_KEY_HANDLE);
-NTSTATUS WINAPI BCryptEncrypt(BCRYPT_KEY_HANDLE, PUCHAR, ULONG, VOID *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG *, ULONG);
 NTSTATUS WINAPI BCryptEnumAlgorithms(ULONG, ULONG *, BCRYPT_ALGORITHM_IDENTIFIER **, ULONG);
 NTSTATUS WINAPI BCryptFinishHash(BCRYPT_HASH_HANDLE, PUCHAR, ULONG, ULONG);
-NTSTATUS WINAPI BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE, BCRYPT_KEY_HANDLE *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG);
 NTSTATUS WINAPI BCryptGenRandom(BCRYPT_ALG_HANDLE, PUCHAR, ULONG, ULONG);
 NTSTATUS WINAPI BCryptGetFipsAlgorithmMode(BOOLEAN *);
 NTSTATUS WINAPI BCryptGetProperty(BCRYPT_HANDLE, LPCWSTR, PUCHAR, ULONG, ULONG *, ULONG);
 NTSTATUS WINAPI BCryptHash(BCRYPT_ALG_HANDLE, PUCHAR, ULONG, PUCHAR, ULONG, PUCHAR, ULONG);
 NTSTATUS WINAPI BCryptHashData(BCRYPT_HASH_HANDLE, PUCHAR, ULONG, ULONG);
 NTSTATUS WINAPI BCryptOpenAlgorithmProvider(BCRYPT_ALG_HANDLE *, LPCWSTR, LPCWSTR, ULONG);
-NTSTATUS WINAPI BCryptSetProperty(BCRYPT_HANDLE, LPCWSTR, PUCHAR, ULONG, ULONG);
 
 #endif  /* __WINE_BCRYPT_H */
-- 
2.9.3

