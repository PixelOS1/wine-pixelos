From ac503c3ac3df652dd37b18a8437d021a929a33aa Mon Sep 17 00:00:00 2001
From: Andrew Wesie <awesie@gmail.com>
Date: Mon, 23 Jul 2018 19:32:56 -0700
Subject: [PATCH 3/9] Pretend to have a wow64 dll.

Since Linux 32-bit code segment is the same as the WoW64 32-bit code segment,
0x23, some programs expect to be in a WoW64 enviornment.

---
 dlls/ntdll/virtual.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
index a39ca94..aff359f 100644
--- a/dlls/ntdll/virtual.c
+++ b/dlls/ntdll/virtual.c
@@ -3000,6 +3000,7 @@ static NTSTATUS get_basic_memory_info( HANDLE process, LPCVOID addr,


 /* get file name for mapped section */
+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
 static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,
                                   MEMORY_SECTION_NAME *info,
                                   SIZE_T len, SIZE_T *res_len )
@@ -3016,6 +3017,19 @@ static NTSTATUS get_section_name( HANDLE process, LPCVOID addr,

     if (!addr || !info || !res_len) return STATUS_INVALID_PARAMETER;

+    if (addr == __wine_syscall_dispatcher)
+    {
+        static const WCHAR wow64dllW[] = {'w','o','w','6','4','c','p','u','.','d','l','l'};
+        info->SectionFileName.Length = sizeof(wow64dllW);
+        info->SectionFileName.MaximumLength = info->SectionFileName.Length + sizeof(WCHAR);
+        info->SectionFileName.Buffer = (WCHAR *)(info + 1);
+
+        ptr = (WCHAR *)(info + 1);
+        memcpy( ptr, wow64dllW, sizeof(wow64dllW) );
+        ptr[sizeof(wow64dllW) / sizeof(WCHAR)] = 0;
+        return 0;
+    }
+
     SERVER_START_REQ( get_mapping_file )
     {
         req->process = wine_server_obj_handle( process );
--
2.7.4

From 22fe4dfa83027aa7a888ff28b53783e836d0de8e Mon Sep 17 00:00:00 2001
From: Andrew Wesie <awesie@gmail.com>
Date: Fri, 27 Jul 2018 01:08:43 -0500
Subject: [PATCH 6/9] Refactor LdrInitializeThunk.

The LdrInitializeThunk export is used by some programs.

The implementation is not complete, just good enough for the one example that
we have. This patch will likely break ARM and ARM64 compilation.
---
 dlls/kernel32/process.c    |  4 +++-
 dlls/ntdll/loader.c        | 22 +++++++++-------------
 dlls/ntdll/ntdll.spec      |  3 +++
 dlls/ntdll/ntdll_misc.h    |  1 -
 dlls/ntdll/signal_i386.c   |  2 +-
 dlls/ntdll/signal_x86_64.c |  2 +-
 dlls/ntdll/thread.c        |  4 ++--
 include/winternl.h         |  2 +-
 8 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/dlls/kernel32/process.c b/dlls/kernel32/process.c
index 6799dfc..ac053e6 100644
--- a/dlls/kernel32/process.c
+++ b/dlls/kernel32/process.c
@@ -74,6 +74,8 @@ extern char **__wine_main_environ;
 static char **__wine_get_main_environment(void) { return __wine_main_environ; }
 #endif

+extern void __wine_ldr_start_process(void *kernel_start);
+
 typedef struct
 {
     LPSTR lpEnvAddress;
@@ -1324,7 +1326,7 @@ void CDECL __wine_kernel_init(void)

     if (!params->CurrentDirectory.Handle) chdir("/"); /* avoid locking removable devices */

-    LdrInitializeThunk( start_process_wrapper, 0, 0, 0 );
+    __wine_ldr_start_process( start_process_wrapper );

  error:
     ExitProcess( GetLastError() );
diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index b0c1b22..c125f96 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -3523,21 +3523,22 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
 }


-/***********************************************************************
- *           attach_dlls
+/******************************************************************
+ *		LdrInitializeThunk (NTDLL.@)
  *
- * Attach to all the loaded dlls.
- * If this is the first time, perform the full process initialization.
  */
-NTSTATUS attach_dlls( CONTEXT *context, void **entry )
+void WINAPI LdrInitializeThunk( PCONTEXT context, ULONG_PTR unknown2,
+                                ULONG_PTR unknown3, ULONG_PTR unknown4 )
 {
     NTSTATUS status;
     WINE_MODREF *wm;
     LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
+    /* For convenience, we use unknown2 to pass a pointer to the entrypoint. */
+    void **entry = (void **)unknown2;

     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );

-    if (process_detaching) return STATUS_SUCCESS;
+    if (process_detaching) return;

     RtlEnterCriticalSection( &loader_section );

@@ -3593,7 +3594,7 @@ NTSTATUS attach_dlls( CONTEXT *context, void **entry )
     }

     RtlLeaveCriticalSection( &loader_section );
-    return STATUS_SUCCESS;
+    return;
 }


@@ -3706,12 +3707,7 @@ static void user_shared_data_init(void)
 }


-/******************************************************************
- *		LdrInitializeThunk (NTDLL.@)
- *
- */
-void WINAPI LdrInitializeThunk( void *kernel_start, ULONG_PTR unknown2,
-                                ULONG_PTR unknown3, ULONG_PTR unknown4 )
+void __wine_ldr_start_process( void *kernel_start )
 {
     static const WCHAR globalflagW[] = {'G','l','o','b','a','l','F','l','a','g',0};
     ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION runlevel;
diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index 542f9f8..7d2cd2f3 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -1518,3 +1518,6 @@

 # User shared data
 @ cdecl __wine_user_shared_data()
+
+# Loader
+@ cdecl __wine_ldr_start_process(ptr)
diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
index 93f24ec..0c680f8 100644
--- a/dlls/ntdll/ntdll_misc.h
+++ b/dlls/ntdll/ntdll_misc.h
@@ -112,7 +112,6 @@ extern void *server_get_shared_memory( HANDLE thread ) DECLSPEC_HIDDEN;

 /* module handling */
 extern LIST_ENTRY tls_links DECLSPEC_HIDDEN;
-extern NTSTATUS attach_dlls( CONTEXT *context, void **entry ) DECLSPEC_HIDDEN;
 extern FARPROC RELAY_GetProcAddress( HMODULE module, const IMAGE_EXPORT_DIRECTORY *exports,
                                      DWORD exp_size, FARPROC proc, DWORD ordinal, const WCHAR *user ) DECLSPEC_HIDDEN;
 extern FARPROC SNOOP_GetProcAddress( HMODULE hmod, const IMAGE_EXPORT_DIRECTORY *exports, DWORD exp_size,
diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
index f0de17a..45c1f23 100644
--- a/dlls/ntdll/signal_i386.c
+++ b/dlls/ntdll/signal_i386.c
@@ -2824,7 +2824,7 @@ PCONTEXT DECLSPEC_HIDDEN attach_thread( LPTHREAD_START_ROUTINE entry, void *arg,
         init_thread_context( ctx, entry, arg, relay );
     }
     ctx->ContextFlags = CONTEXT_FULL;
-    attach_dlls( ctx, (void **)&ctx->Eax );
+    LdrInitializeThunk( ctx, (ULONG_PTR)&ctx->Eax, 0, 0 );
     return ctx;
 }

diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
index bf21b42..3818f65 100644
--- a/dlls/ntdll/signal_x86_64.c
+++ b/dlls/ntdll/signal_x86_64.c
@@ -4481,7 +4481,7 @@ PCONTEXT DECLSPEC_HIDDEN attach_thread( LPTHREAD_START_ROUTINE entry, void *arg,
         init_thread_context( ctx, entry, arg, relay );
     }
     ctx->ContextFlags = CONTEXT_FULL;
-    attach_dlls( ctx, (void **)&ctx->Rcx );
+    LdrInitializeThunk( ctx, (ULONG_PTR)&ctx->Rcx, 0, 0 );
     return ctx;
 }

diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
index 40304db..ba47c02 100644
--- a/dlls/ntdll/thread.c
+++ b/dlls/ntdll/thread.c
@@ -69,7 +69,7 @@ void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
 struct startup_info
 {
     TEB                            *teb;
-    PRTL_THREAD_START_ROUTINE       entry_point;
+    LPTHREAD_START_ROUTINE         entry_point;
     void                           *entry_arg;
 };

@@ -691,7 +691,7 @@ static void start_thread( struct startup_info *info )

     signal_init_thread( teb );
     server_init_thread( info->entry_point, &suspend );
-    signal_start_thread( (LPTHREAD_START_ROUTINE)info->entry_point, info->entry_arg, suspend );
+    signal_start_thread( info->entry_point, info->entry_arg, suspend );
 }


diff --git a/include/winternl.h b/include/winternl.h
index 8924d76..42b2406 100644
--- a/include/winternl.h
+++ b/include/winternl.h
@@ -2347,7 +2347,7 @@ NTSYSAPI NTSTATUS  WINAPI LdrDisableThreadCalloutsForDll(HMODULE);
 NTSYSAPI NTSTATUS  WINAPI LdrFindEntryForAddress(const void*, PLDR_MODULE*);
 NTSYSAPI NTSTATUS  WINAPI LdrGetDllHandle(LPCWSTR, ULONG, const UNICODE_STRING*, HMODULE*);
 NTSYSAPI NTSTATUS  WINAPI LdrGetProcedureAddress(HMODULE, const ANSI_STRING*, ULONG, void**);
-NTSYSAPI void      WINAPI LdrInitializeThunk(void*,ULONG_PTR,ULONG_PTR,ULONG_PTR);
+NTSYSAPI void      WINAPI LdrInitializeThunk(PCONTEXT,ULONG_PTR,ULONG_PTR,ULONG_PTR);
 NTSYSAPI NTSTATUS  WINAPI LdrLoadDll(LPCWSTR, DWORD, const UNICODE_STRING*, HMODULE*);
 NTSYSAPI NTSTATUS  WINAPI LdrLockLoaderLock(ULONG,ULONG*,ULONG_PTR*);
 IMAGE_BASE_RELOCATION * WINAPI LdrProcessRelocationBlock(void*,UINT,USHORT*,INT_PTR);
--
2.7.4

From 1816a1e94c19ee859cbc5ac72626bc3ab319c0bd Mon Sep 17 00:00:00 2001
From: Andrew Wesie <awesie@gmail.com>
Date: Fri, 27 Jul 2018 01:22:59 -0500
Subject: [PATCH 7/9] Refactor RtlCreateUserThread into NtCreateThreadEx.

NtCreateThread and NtCreateThreadEx are exported by ntdll, and used by some
programs.

Wine only uses RtlCreateUserThread to create threads internally, so refactor
it to call either NtCreateThread or NtCreateThreadEx depending on the OS
version. Since NtCreateThreadEx does not exist on XP/2003, attempting to use
it may crash some programs.

Implementations may be incomplete. This patch will fail to compile on ARM and
ARM64 due to missing implementation for NtCreateThread.
---
 dlls/ntdll/ntdll.spec |   2 +-
 dlls/ntdll/thread.c   | 166 +++++++++++++++++++++++++++++++++++++++++---------
 include/winternl.h    |  25 ++++++++
 3 files changed, 164 insertions(+), 29 deletions(-)

diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index 7d2cd2f3..3beb428 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -154,7 +154,7 @@
 @ stdcall NtCreateSection(ptr long ptr ptr long long long)
 @ stdcall NtCreateSemaphore(ptr long ptr long long)
 @ stdcall NtCreateSymbolicLinkObject(ptr long ptr ptr)
-@ stub NtCreateThread
+@ stdcall NtCreateThread(ptr long ptr long ptr ptr ptr long)
 @ stdcall NtCreateThreadEx(ptr long ptr long ptr ptr long long long long ptr)
 @ stdcall NtCreateTimer(ptr long ptr long)
 @ stub NtCreateToken
diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
index ba47c02..aa489e6 100644
--- a/dlls/ntdll/thread.c
+++ b/dlls/ntdll/thread.c
@@ -698,34 +698,18 @@ static void start_thread( struct startup_info *info )
 /***********************************************************************
  *              NtCreateThreadEx   (NTDLL.@)
  */
-NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *obj_attr,
                                   HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
                                   ULONG flags, ULONG zero_bits, ULONG stack_commit,
-                                  ULONG stack_reserve, void *attribute_list )
-{
-    FIXME( "%p, %x, %p, %p, %p, %p, %x, %x, %x, %x, %p semi-stub!\n", handle_ptr, access, attr,
-           process, start, param, flags, zero_bits, stack_commit, stack_reserve, attribute_list );
-
-    return RtlCreateUserThread( process, NULL, flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED,
-                                NULL, stack_reserve, stack_commit, (PRTL_THREAD_START_ROUTINE)start,
-                                param, handle_ptr, NULL );
-}
-
-
-/***********************************************************************
- *              RtlCreateUserThread   (NTDLL.@)
- */
-NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, const SECURITY_DESCRIPTOR *descr,
-                                     BOOLEAN suspended, PVOID stack_addr,
-                                     SIZE_T stack_reserve, SIZE_T stack_commit,
-                                     PRTL_THREAD_START_ROUTINE start, void *param,
-                                     HANDLE *handle_ptr, CLIENT_ID *id )
+                                  ULONG stack_reserve, PPS_ATTRIBUTE_LIST ps_attr_list )
 {
     sigset_t sigset;
     pthread_t pthread_id;
-    pthread_attr_t attr;
+    pthread_attr_t pthread_attr;
     struct ntdll_thread_data *thread_data;
     struct startup_info *info;
+    BOOLEAN suspended = !!(flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED);
+    CLIENT_ID *id = NULL;
     HANDLE handle = 0, actctx = 0;
     TEB *teb = NULL;
     DWORD tid = 0;
@@ -733,6 +717,33 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, const SECURITY_DESCRIPTOR *
     NTSTATUS status;
     SIZE_T extra_stack = PTHREAD_STACK_MIN;

+    TRACE("(%p, %d, %p, %p, %p, %p, %u, %u, %u, %u, %p)\n",
+          handle_ptr, access, obj_attr, process, start, param, flags,
+          zero_bits, stack_commit, stack_reserve, ps_attr_list);
+
+    if (ps_attr_list != NULL)
+    {
+        PS_ATTRIBUTE *ps_attr,
+                     *ps_attr_end = (PS_ATTRIBUTE *)((UINT_PTR)ps_attr_list + ps_attr_list->TotalLength);
+        for (ps_attr = &ps_attr_list->Attributes[0]; ps_attr < ps_attr_end; ps_attr++)
+        {
+            switch (ps_attr->Attribute)
+            {
+            case PS_ATTRIBUTE_CLIENT_ID:
+                /* TODO validate ps_attr->Size == sizeof(CLIENT_ID) */
+                /* TODO set *ps_attr->ReturnLength */
+                id = ps_attr->ValuePtr;
+                break;
+            default:
+                FIXME("Unsupported attribute %08X\n", ps_attr->Attribute);
+                break;
+            }
+        }
+    }
+
+    if (access == (ACCESS_MASK)0)
+        access = THREAD_ALL_ACCESS;
+
     if (process != NtCurrentProcess())
     {
         apc_call_t call;
@@ -763,7 +774,7 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, const SECURITY_DESCRIPTOR *

     SERVER_START_REQ( new_thread )
     {
-        req->access     = THREAD_ALL_ACCESS;
+        req->access     = access;
         req->attributes = 0;  /* FIXME */
         req->suspend    = suspended;
         req->request_fd = request_pipe[0];
@@ -820,19 +831,19 @@ NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, const SECURITY_DESCRIPTOR *
     thread_data->wait_fd[1]  = -1;
     thread_data->start_stack = (char *)teb->Tib.StackBase;

-    pthread_attr_init( &attr );
-    pthread_attr_setstack( &attr, teb->DeallocationStack,
+    pthread_attr_init( &pthread_attr );
+    pthread_attr_setstack( &pthread_attr, teb->DeallocationStack,
                          (char *)teb->Tib.StackBase + extra_stack - (char *)teb->DeallocationStack );
-    pthread_attr_setscope( &attr, PTHREAD_SCOPE_SYSTEM ); /* force creating a kernel thread */
+    pthread_attr_setscope( &pthread_attr, PTHREAD_SCOPE_SYSTEM ); /* force creating a kernel thread */
     interlocked_xchg_add( &nb_threads, 1 );
-    if (pthread_create( &pthread_id, &attr, (void * (*)(void *))start_thread, info ))
+    if (pthread_create( &pthread_id, &pthread_attr, (void * (*)(void *))start_thread, info ))
     {
         interlocked_xchg_add( &nb_threads, -1 );
-        pthread_attr_destroy( &attr );
+        pthread_attr_destroy( &pthread_attr );
         status = STATUS_NO_MEMORY;
         goto error;
     }
-    pthread_attr_destroy( &attr );
+    pthread_attr_destroy( &pthread_attr );
     pthread_sigmask( SIG_SETMASK, &sigset, NULL );

     if (id) id->UniqueThread = ULongToHandle(tid);
@@ -849,6 +860,105 @@ error:
     return status;
 }

+NTSTATUS WINAPI NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr, HANDLE process,
+                                CLIENT_ID *id, CONTEXT *context, INITIAL_TEB *teb, BOOLEAN suspended )
+{
+    LPTHREAD_START_ROUTINE start;
+    void *param;
+    ULONG flags = suspended ? THREAD_CREATE_FLAGS_CREATE_SUSPENDED : 0;
+    PS_ATTRIBUTE_LIST attr_list, *pattr_list = NULL;
+
+#if defined(__i386__)
+    start = (LPTHREAD_START_ROUTINE)context->Eax;
+    param = (void *)context->Ebx;
+#elif defined(__x86_64__)
+    start = (LPTHREAD_START_ROUTINE)context->Rax;
+    param = (void *)context->Rbx;
+#else
+    /* TODO Support for ARM and ARM64. */
+    #error Your CPU is not supported.
+#endif
+
+    if (id)
+    {
+        attr_list.TotalLength = sizeof(PS_ATTRIBUTE_LIST);
+        attr_list.Attributes[0].Attribute = PS_ATTRIBUTE_CLIENT_ID;
+        attr_list.Attributes[0].Size = sizeof(CLIENT_ID);
+        attr_list.Attributes[0].ValuePtr = id;
+        attr_list.Attributes[0].ReturnLength = NULL;
+        pattr_list = &attr_list;
+    }
+
+    return NtCreateThreadEx(handle_ptr, access, attr, process, start, param, flags, 0, 0, 0, pattr_list);
+}
+
+NTSTATUS WINAPI __syscall_NtCreateThread( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+                                          HANDLE process, CLIENT_ID *id, CONTEXT *context, INITIAL_TEB *teb,
+                                          BOOLEAN suspended );
+NTSTATUS WINAPI __syscall_NtCreateThreadEx( HANDLE *handle_ptr, ACCESS_MASK access, OBJECT_ATTRIBUTES *attr,
+                                            HANDLE process, LPTHREAD_START_ROUTINE start, void *param,
+                                            ULONG flags, ULONG zero_bits, ULONG stack_commit,
+                                            ULONG stack_reserve, PPS_ATTRIBUTE_LIST ps_attr_list );
+
+/***********************************************************************
+ *              RtlCreateUserThread   (NTDLL.@)
+ */
+NTSTATUS WINAPI RtlCreateUserThread( HANDLE process, const SECURITY_DESCRIPTOR *descr,
+                                     BOOLEAN suspended, PVOID stack_addr,
+                                     SIZE_T stack_reserve, SIZE_T stack_commit,
+                                     PRTL_THREAD_START_ROUTINE start, void *param,
+                                     HANDLE *handle_ptr, CLIENT_ID *id )
+{
+    if (descr)
+        FIXME("descr != NULL is unimplemented\n");
+    if (stack_addr)
+        FIXME("stack_addr != NULL is unimplemented\n");
+
+    if (NtCurrentTeb()->Peb->OSMajorVersion < 6)
+    {
+        /* Use old API. */
+        CONTEXT context = { 0 };
+
+        if (stack_commit)
+            FIXME("stack_commit != 0 is unimplemented\n");
+        if (stack_reserve)
+            FIXME("stack_reserve != 0 is unimplemented\n");
+
+        /* TODO does this need to be more correct? */
+        context.ContextFlags = CONTEXT_FULL;
+#if defined(__i386__)
+        context.Eax = (ULONG)start;
+        context.Ebx = (ULONG)param;
+#elif defined(__x86_64__)
+        context.Rax = (DWORD64)start;
+        context.Rbx = (DWORD64)param;
+#else
+        /* TODO Support for ARM and ARM64. */
+        #error Your CPU is not supported.
+#endif
+
+        return __syscall_NtCreateThread(handle_ptr, (ACCESS_MASK)0, NULL, process, id, &context, NULL, suspended);
+    }
+    else
+    {
+        /* Use new API from Vista+. */
+        ULONG flags = suspended ? THREAD_CREATE_FLAGS_CREATE_SUSPENDED : 0;
+        PS_ATTRIBUTE_LIST attr_list, *pattr_list = NULL;
+
+        if (id)
+        {
+            attr_list.TotalLength = sizeof(PS_ATTRIBUTE_LIST);
+            attr_list.Attributes[0].Attribute = PS_ATTRIBUTE_CLIENT_ID;
+            attr_list.Attributes[0].Size = sizeof(CLIENT_ID);
+            attr_list.Attributes[0].ValuePtr = id;
+            attr_list.Attributes[0].ReturnLength = NULL;
+            pattr_list = &attr_list;
+        }
+
+        return __syscall_NtCreateThreadEx(handle_ptr, (ACCESS_MASK)0, NULL, process, (LPTHREAD_START_ROUTINE)start, param, flags, 0, stack_commit, stack_reserve, pattr_list);
+    }
+}
+

 /******************************************************************************
  *              RtlGetNtGlobalFlags   (NTDLL.@)
diff --git a/include/winternl.h b/include/winternl.h
index 42b2406..41fa26f 100644
--- a/include/winternl.h
+++ b/include/winternl.h
@@ -2217,6 +2217,31 @@ typedef enum _SYSDBG_COMMAND {
   SysDbgWriteBusData
 } SYSDBG_COMMAND, *PSYSDBG_COMMAND;

+#define PS_ATTRIBUTE_THREAD  0x00010000
+#define PS_ATTRIBUTE_INPUT   0x00020000
+#define PS_ATTRIBUTE_UNKNOWN 0x00040000
+
+typedef enum _PS_ATTRIBUTE_NUM {
+    PsAttributeClientId = 3,
+} PS_ATTRIBUTE_NUM;
+
+#define PS_ATTRIBUTE_CLIENT_ID (PsAttributeClientId | PS_ATTRIBUTE_THREAD)
+
+typedef struct _PS_ATTRIBUTE {
+    ULONG Attribute;
+    SIZE_T Size;
+    union {
+        ULONG Value;
+        PVOID ValuePtr;
+    };
+    PSIZE_T ReturnLength;
+} PS_ATTRIBUTE;
+
+typedef struct _PS_ATTRIBUTE_LIST {
+    SIZE_T TotalLength;
+    PS_ATTRIBUTE Attributes[1];
+} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;
+

 /*************************************************************************
  * Loader structures
--
2.7.4

From 4a26eee5085f06865a98c22b721a1e238bdc17d2 Mon Sep 17 00:00:00 2001
From: Andrew Wesie <awesie@gmail.com>
Date: Fri, 27 Jul 2018 01:30:59 -0500
Subject: [PATCH 9/9] Refactor __wine_syscall_dispatcher for i386.

Some programs verify the NTDLL system calls, specifically that the first and
last instruction (ret) are executed. The previous version of
__wine_syscall_dispatcher intentionally never returned back to the return
instruction as an optimization.

The new version will make a copy of the arguments on to the stack, call the
system call implementaion, restore the stack pointer, and return back to the
__syscall_ wrapper function.

There is a known bug: the new version will copy more bytes than necessary.
This could cause a segmentation fault if the arguments are sufficiently close
to the end of the stack memory allocation.
---
 tools/winebuild/spec32.c | 23 +++++++++++++++++++----
 1 file changed, 19 insertions(+), 4 deletions(-)

diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
index 48a9abe..24ea17d 100644
--- a/tools/winebuild/spec32.c
+++ b/tools/winebuild/spec32.c
@@ -405,15 +405,30 @@ static void output_syscall_thunks_x86( DLLSPEC *spec )
     output( "\t%s\n", func_declaration("__wine_syscall_dispatcher") );
     output( "%s\n", asm_globl("__wine_syscall_dispatcher") );
     output_cfi( ".cfi_startproc" );
-    output( "\tadd $4, %%esp\n" );
+    output( "\tpush %%ebp\n" );
+    output( "\tmov %%esp, %%ebp\n" );
+    output( "\tpush %%esi\n" );
+    output( "\tpush %%edi\n" );
+    /* XXX We always copy 64 bytes. This will crash if we go past the end of the stack. */
+    output( "\tsub $0x40, %%esp\n" );
+    output( "\tmov %%edx, %%esi\n" );
+    output( "\tmov %%esp, %%edi\n" );
+    output( "\tmov $0x10, %%ecx\n" );
+    output( "\trep movsd\n" );
     if (UsePIC)
     {
         output( "\tcall 1f\n" );
         output( "1:\tpopl %%ecx\n" );
-        output( "\tjmpl *(%s-1b)(%%ecx,%%eax,%d)\n", asm_name("__wine_syscall_table"), get_ptr_size() );
+        output( "\tcalll *(%s-1b)(%%ecx,%%eax,%d)\n", asm_name("__wine_syscall_table"), get_ptr_size() );
     }
-    else output( "\tjmpl *%s(,%%eax,%d)\n", asm_name("__wine_syscall_table"), get_ptr_size() );
-    output( "\tret\n" );
+    else output( "\tcalll *%s(,%%eax,%d)\n", asm_name("__wine_syscall_table"), get_ptr_size() );
+    /* Esp will not be properly restored by the callee, so we must restore from the frame pointer. */
+    output( "\tlea -8(%%ebp), %%esp\n" );
+    output( "\tpop %%edi\n" );
+    output( "\tpop %%esi\n" );
+    output( "\tleave\n" );
+    /* XXX This probably makes the RSB unhappy, but we need to account for the "add esp, 4" in the syscall. */
+    output( "\tjmpl *(%%esp)\n" );
     output_cfi( ".cfi_endproc" );
     output_function_size( "__wine_syscall_dispatcher" );
 }
--
2.7.4

